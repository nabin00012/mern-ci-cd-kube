name: MERN Stack CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  SERVER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/mern-server
  CLIENT_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/mern-client

jobs:
  test-server:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7-jammy
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install server dependencies
      working-directory: ./server
      run: npm ci

    - name: Run server linting
      working-directory: ./server
      run: npm run test || echo "No lint script found"

    - name: Run server tests
      working-directory: ./server
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_URI_TEST: mongodb://admin:password123@localhost:27017/mernapp_test?authSource=admin

  test-client:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install client dependencies
      working-directory: ./client
      run: npm ci

    - name: Run client tests
      working-directory: ./client
      run: npm test -- --coverage --passWithNoTests
      env:
        CI: true

    - name: Build client
      working-directory: ./client
      run: npm run build
      env:
        REACT_APP_API_URL: http://localhost:5000

    - name: Upload client build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-build
        path: client/build/

  build-and-push:
    name: Build and Push Docker Images
    needs: [test-server, test-client]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for server image
      id: server-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.SERVER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for client image
      id: client-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.CLIENT_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push server image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        file: ./server/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.server-meta.outputs.tags }}
        labels: ${{ steps.server-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push client image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        file: ./client/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.client-meta.outputs.tags }}
        labels: ${{ steps.client-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          REACT_APP_API_URL=http://localhost:5000

  deploy:
    name: Deploy to Kubernetes
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update Kubernetes deployment files
      run: |
        # Update image tags in deployment files
        sed -i "s|your-dockerhub-username|${{ secrets.DOCKERHUB_USERNAME }}|g" k8s/server-deployment.yaml
        sed -i "s|your-dockerhub-username|${{ secrets.DOCKERHUB_USERNAME }}|g" k8s/client-deployment.yaml
        
        # Add latest tag or commit SHA
        IMAGE_TAG="${{ github.sha }}"
        sed -i "s|:latest|:${IMAGE_TAG}|g" k8s/server-deployment.yaml
        sed -i "s|:latest|:${IMAGE_TAG}|g" k8s/client-deployment.yaml

    # Uncomment and configure the following steps for actual Kubernetes deployment
    # - name: Configure kubectl
    #   uses: azure/k8s-set-context@v3
    #   with:
    #     method: kubeconfig
    #     kubeconfig: ${{ secrets.KUBE_CONFIG }}

    # - name: Deploy to Kubernetes
    #   run: |
    #     kubectl apply -f k8s/
    #     kubectl rollout status deployment/server-deployment -n mern-app
    #     kubectl rollout status deployment/client-deployment -n mern-app

    - name: Deploy Status
      run: |
        echo "ðŸš€ Deployment configuration updated!"
        echo "ðŸ“¦ Server Image: ${{ env.SERVER_IMAGE_NAME }}:${{ github.sha }}"
        echo "ðŸ“¦ Client Image: ${{ env.CLIENT_IMAGE_NAME }}:${{ github.sha }}"
        echo ""
        echo "To deploy to your Kubernetes cluster, run:"
        echo "kubectl apply -f k8s/"
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Run Trivy vulnerability scanner for server
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.SERVER_IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'server-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner for client
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.CLIENT_IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'client-trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'server-trivy-results.sarif'

    - name: Upload Client Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'client-trivy-results.sarif'